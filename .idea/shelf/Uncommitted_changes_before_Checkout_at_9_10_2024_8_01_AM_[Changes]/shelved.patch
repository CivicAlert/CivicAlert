Index: app/src/main/java/com/example/civicalertoriginal/Components/Components.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:Suppress(\"UNUSED_EXPRESSION\")\r\n\r\npackage com.example.civicalertoriginal.Components\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.offset\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Call\r\nimport androidx.compose.material.icons.filled.Email\r\nimport androidx.compose.material.icons.filled.LocationOn\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.Checkbox\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExposedDropdownMenuDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalUriHandler\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontStyle\r\nimport androidx.compose.ui.text.font.FontSynthesis\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.text.style.TextDecoration\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport com.example.civicalertoriginal.R\r\n\r\n\r\n@Composable\r\nfun LogAndForgotHeader(screenLabel:String) {\r\n    Column ( modifier = Modifier.fillMaxWidth(),\r\n        horizontalAlignment = Alignment.CenterHorizontally)\r\n    {\r\n        Image(painter = painterResource(id = R.drawable.logo),\r\n            contentDescription = \"Picture Logo\", modifier = Modifier.size(150.dp, 150.dp))\r\n        Spacer(modifier = Modifier.size(5.dp))\r\n        Text(text = screenLabel , modifier = Modifier\r\n            .align(Alignment.CenterHorizontally)\r\n            .wrapContentSize(),\r\n            style = TextStyle( color = Color.Black,\r\n                fontStyle = FontStyle.Normal,\r\n                fontSize = 20.sp)\r\n        )\r\n\r\n    }\r\n}\r\n\r\n//Text fields that accept text only\r\n@Composable\r\nfun TextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n//Text fields that accept Numbers only\r\n@Composable\r\nfun NumberTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n//Text fields that accept email only\r\n@Composable\r\nfun EmailTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PasswordTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n\r\n    var passwordVisibility by remember { mutableStateOf(false) }\r\n    val icon = if(passwordVisibility )\r\n        painterResource(id = R.drawable.eye)\r\n    else\r\n        painterResource(id = R.drawable.hidden)\r\n\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value ,\r\n            onValueChange = onChange,\r\n            supportingText = {\r\n                Text(text = \"Passwords must match\")},\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n\r\n\r\n            trailingIcon = {\r\n                IconButton(onClick = { passwordVisibility = !passwordVisibility }) {\r\n                    Icon(painter = icon, contentDescription =\"\",\r\n                        modifier = Modifier.size(20.dp,20.dp))\r\n\r\n                }\r\n\r\n            }, visualTransformation = if (passwordVisibility) VisualTransformation.None\r\n            else PasswordVisualTransformation(),\r\n\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun BottomButtons(name: String, onClick: () -> Unit,){\r\n    Button(onClick = onClick, shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(200.dp)) {\r\n        Text(text = name, modifier = Modifier\r\n            .size(80.dp, 30.dp)\r\n            .padding(start = 17.dp, top = 4.dp)\r\n            .align(Alignment.CenterVertically),\r\n            color = Color.Black)\r\n    }\r\n}\r\n@Composable\r\nfun SubmitButton(name: String, onClick: () -> Unit,){\r\n    Button(onClick = onClick, shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(260.dp)\r\n            .padding(start = 100.dp)) {\r\n        Text(text = name, modifier = Modifier\r\n            .size(80.dp, 30.dp)\r\n            .padding(start = 17.dp, top = 4.dp)\r\n            .align(Alignment.CenterVertically),\r\n            color = Color.Black)\r\n    }\r\n}\r\n@Composable\r\nfun Logo(){\r\n    Image(painter = painterResource(id = R.drawable.logo), contentDescription =\"\" )\r\n}\r\n@Composable\r\nfun CardButton(iconRes: Int, label: String, onClick: () -> Unit) {\r\n    Card(\r\n        modifier = Modifier\r\n            .size(160.dp)\r\n            .clickable(onClick = onClick),\r\n        colors = CardDefaults.cardColors(containerColor = Color.White), // Set the background color to white\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp) // Set elevation to add shadow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(8.dp),\r\n            verticalArrangement = Arrangement.Center,\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Image(\r\n                painter = painterResource(id = iconRes),\r\n                contentDescription = \"\",\r\n                modifier = Modifier.size(40.dp)\r\n            )\r\n            Text(text = label)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun LogBottomButtons(name: String, onClick: () -> Unit, enabled: Boolean){\r\n    Button(onClick = onClick, enabled = enabled, shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(200.dp)) {\r\n        Text(text = name, modifier = Modifier\r\n            .size(80.dp, 30.dp)\r\n            .padding(start = 17.dp, top = 4.dp)\r\n            .align(Alignment.CenterVertically),\r\n            color = Color.Black)\r\n    }\r\n}\r\n@Composable\r\nfun SignUpText(value: String) {\r\n    var checkedState by remember { mutableStateOf(false) } // State for checkbox\r\n\r\n    Row(modifier = Modifier.padding(2.dp)) {\r\n        Text(text = value, modifier = Modifier.padding(end = 8.dp)) // Added padding to the text\r\n\r\n        Checkbox(\r\n            checked = checkedState, // Use the state for the checkbox\r\n            onCheckedChange = { checkedState = it }, // Update the state when clicked\r\n            enabled = true,\r\n            modifier = Modifier\r\n                .size(20.dp)\r\n                .padding(end = 16.dp, start = 12.dp)\r\n                .clip(RoundedCornerShape(50.dp))\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun InstructionText(value: String){\r\n    Text(\r\n        text = value,\r\n        style = TextStyle(\r\n            fontStyle = FontStyle.Normal,\r\n            fontSize = 15.sp,\r\n            color = Color.Black\r\n        )\r\n    )\r\n}\r\n@Composable\r\nfun LocationTextFields(value: String, onChange: (String) -> Unit, fieldLabel: String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            trailingIcon = {\r\n                Icon(\r\n                    modifier = Modifier\r\n                        .size(35.dp, 35.dp)\r\n                        .clickable { },\r\n                    imageVector = Icons.Default.LocationOn,\r\n                    contentDescription = \"Location Icon\"\r\n                ) },\r\n            keyboardOptions = KeyboardOptions.Default,\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n@Composable\r\nfun ReportDescriptionText(value1: String, value:String,){\r\n    Column {\r\n\r\n        Text(text = value1, style = TextStyle(\r\n            fontFamily = FontFamily.SansSerif,\r\n            fontSize = 20.sp, fontWeight = FontWeight.Bold,\r\n            fontSynthesis = FontSynthesis.All\r\n        )\r\n        )\r\n        Text(text = value, style = TextStyle(\r\n            fontFamily = FontFamily.Default,\r\n            fontSize = 16.sp,\r\n            fontWeight = FontWeight.Light,\r\n        )\r\n        )\r\n    }\r\n}\r\n@Composable\r\nfun PictureTextFields(value: String, onChange: (String) -> Unit, navController: NavController){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n           // placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            trailingIcon = {\r\n                Image(painter = painterResource(id = R.drawable.camera), contentDescription =\"\" ,\r\n                    modifier = Modifier.clickable { navController.navigate(\"Camera\")}\r\n                        .size(25.dp)) },\r\n            keyboardOptions = KeyboardOptions.Default,\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n@Composable\r\nfun DescriptionTextFields(value: String, onChange: (String) -> Unit, fieldLabel: String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n           placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            keyboardOptions = KeyboardOptions.Default,\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun ExposedDropdownMenuBox(\r\n    selectedIncident: String,\r\n    onIncidentSelected: (String) -> Unit\r\n) {\r\n    val context = LocalContext.current\r\n    val Incidents= arrayOf(\"Water\", \"Electricity\", \"Pothole\", \"Other\")\r\n    var expanded by remember { mutableStateOf(false) }\r\n   // var selectedText by remember { mutableStateOf(Incidents[0]) }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n\r\n    ) {\r\n        androidx.compose.material3.ExposedDropdownMenuBox(\r\n            expanded = expanded,\r\n            onExpandedChange = {\r\n                expanded = !expanded\r\n            }\r\n        ) {\r\n            TextField(\r\n                value = selectedIncident,\r\n                onValueChange = {},\r\n                readOnly = true,\r\n                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },\r\n                modifier = Modifier\r\n                    .menuAnchor()\r\n                    .fillMaxWidth()\r\n            )\r\n\r\n            ExposedDropdownMenu(\r\n                expanded = expanded,\r\n                onDismissRequest = { expanded = false }\r\n            ) {\r\n                Incidents.forEach { item ->\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = item) },\r\n                        onClick = {\r\n                           onIncidentSelected(item)\r\n                            expanded = false\r\n                            Toast.makeText(context, item, Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun SignUpBottomButtons( name:String , onClick : ()-> Unit ){\r\n    Button(\r\n        onClick = onClick,\r\n        shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(200.dp)\r\n    ) {\r\n        Text(text = name, modifier = Modifier\r\n            .size(80.dp, 30.dp)\r\n            .padding(start = 17.dp, top = 4.dp)\r\n            .align(Alignment.CenterVertically),\r\n            color = Color.Black)\r\n    }\r\n}\r\n@Composable\r\nfun ProfileText(description: String , value: String, onSave:(String)-> Unit) {\r\n    var textFieldVisible by remember { mutableStateOf(false) }\r\n    var textFieldValue by remember { mutableStateOf(value) }\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .padding(10.dp)\r\n            .fillMaxWidth()\r\n    ) {\r\n        // Clickable Text\r\n        Text(text = description, fontFamily = FontFamily.SansSerif, fontSize = 17.sp)\r\n        Spacer(modifier = Modifier.size(10.dp))\r\n        Text(\r\n            text = value,\r\n            modifier = Modifier.clickable {\r\n                textFieldVisible = true\r\n            },\r\n            fontSize = 25.sp,\r\n            fontFamily = FontFamily.Default,\r\n            style = MaterialTheme.typography.bodyMedium.copy(\r\n                textDecoration = TextDecoration.Underline\r\n            )\r\n        )\r\n\r\n        // Conditional Text Field\r\n        if (textFieldVisible) {\r\n            Spacer(modifier = Modifier.height(10.dp))\r\n            TextField(\r\n                value = textFieldValue,\r\n                onValueChange = { textFieldValue = it },\r\n                modifier = Modifier.fillMaxWidth()\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n            Button(\r\n                onClick = {\r\n                    textFieldVisible = false\r\n                    onSave(textFieldValue)\r\n                    // logic to do when saving thee data\r\n                },\r\n                modifier = Modifier.align(alignment = androidx.compose.ui.Alignment.End)\r\n            ) {\r\n                Text(\"Save\")\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun UpdateProfileButton(name: String, onClick: () -> Unit) {\r\n    Button(\r\n        onClick = onClick, shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(400.dp)\r\n    ) {\r\n        Text(\r\n            text = name, modifier = Modifier\r\n                .size(80.dp, 30.dp)\r\n                .padding(start = 17.dp, top = 4.dp)\r\n                .align(Alignment.CenterVertically)\r\n                .fillMaxWidth(),\r\n            color = Color.Black\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun BottomButtonsMyProfile(name: String, onClick: () -> Unit) {\r\n    Button(\r\n        onClick = onClick, shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Red),\r\n        modifier = Modifier\r\n            .width(400.dp)\r\n    ) {\r\n        Text(\r\n            text = name, modifier = Modifier\r\n                .size(80.dp, 30.dp)\r\n                .padding(start = 17.dp, top = 4.dp)\r\n                .align(Alignment.CenterVertically)\r\n                .fillMaxWidth(),\r\n            color = Color.Black\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n@Composable\r\nfun ContactUsContactButton(value: String, phoneNumber: String) {\r\n    val context = LocalContext.current\r\n\r\n    Button(\r\n        onClick = {\r\n            // Dialer Intent\r\n            val dialIntent = Intent(Intent.ACTION_DIAL).apply {\r\n                data = Uri.parse(\"tel:$08299999999\")\r\n            }\r\n            context.startActivity(dialIntent)\r\n        },\r\n        colors = ButtonDefaults.buttonColors(\r\n            contentColor = Color.Black, containerColor = Color.White\r\n        ),\r\n        shape = RoundedCornerShape(15.dp),\r\n        elevation = ButtonDefaults.buttonElevation(defaultElevation = 16.dp),\r\n        modifier = Modifier\r\n            .padding(8.dp)\r\n            .size(170.dp, 50.dp)\r\n    ) {\r\n        Icon(imageVector = Icons.Default.Call, contentDescription = \"\", modifier = Modifier.size(20.dp))\r\n        Spacer(modifier = Modifier.size(5.dp))\r\n        Text(text = value, fontSize = 15.sp)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun ContactUSEmailButton(value: String, email: String) {\r\n    val context = LocalContext.current\r\n\r\n    Button(\r\n        onClick = {\r\n            // Email Intent\r\n            val emailIntent = Intent(Intent.ACTION_SENDTO).apply {\r\n                data = Uri.parse(\"mailto:Civicalert300@gmail.com\") // Only email apps should handle this\r\n                putExtra(Intent.EXTRA_EMAIL, arrayOf(email)) // Recipient\r\n                putExtra(Intent.EXTRA_SUBJECT, \"Your Subject Here\") // Optional subject\r\n                putExtra(Intent.EXTRA_TEXT, \"Your message here.\") // Optional message body\r\n            }\r\n\r\n            // Verify there is an email app installed before trying to open it\r\n            if (emailIntent.resolveActivity(context.packageManager) != null) {\r\n                context.startActivity(emailIntent)\r\n            } else {\r\n                Toast.makeText(context, \"No email app found.\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        },\r\n        colors = ButtonDefaults.buttonColors(\r\n            contentColor = Color.Black, containerColor = Color.White\r\n        ),\r\n        shape = RoundedCornerShape(15.dp),\r\n        elevation = ButtonDefaults.buttonElevation(defaultElevation = 16.dp),\r\n        modifier = Modifier\r\n            .padding(8.dp)\r\n            .size(170.dp, 50.dp)\r\n    ) {\r\n        Icon(imageVector = Icons.Default.Email, contentDescription = \"\", modifier = Modifier.size(20.dp))\r\n        Spacer(modifier = Modifier.size(5.dp))\r\n        Text(text = value, fontSize = 18.sp)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun ContactUsWhatsApp(value: String) {\r\n    val uriHandler = LocalUriHandler.current\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally,\r\n        modifier = Modifier.offset(x = -20.dp)) {\r\n        Row(verticalAlignment = Alignment.CenterVertically) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.whatsapp),\r\n                contentDescription = \"\",\r\n                modifier = Modifier.size(35.dp)\r\n            )\r\n            Column(modifier = Modifier.padding(start = 10.dp)) {\r\n                Text(\r\n                    text = value,\r\n                    fontSize = 20.sp,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n                Text(\r\n                    text = \"082222222222\",\r\n                    color = Color.Blue,\r\n                    modifier = Modifier.clickable {\r\n                        uriHandler.openUri(\"https://wa.me/082222222222\")\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun ContactUsWMessanger(value: String) {\r\n    val uriHandler = LocalUriHandler.current\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\r\n        Row(verticalAlignment = Alignment.CenterVertically) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.messenger),\r\n                contentDescription = \"\",\r\n                modifier = Modifier.size(35.dp)\r\n            )\r\n            Column(modifier = Modifier.padding(start = 10.dp)) {\r\n                Text(\r\n                    text = value,\r\n                    fontSize = 20.sp,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n                Text(\r\n                    text = \"Facebook\",\r\n                    color = Color.Blue,\r\n                    modifier = Modifier.clickable {\r\n                        uriHandler.openUri(\"https://www.messenger.com/t/facebook\")\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun ContactUsInsta(value: String) {\r\n    val uriHandler = LocalUriHandler.current\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally,\r\n        modifier = Modifier.offset(x = -25.dp)) {\r\n        Row(verticalAlignment = Alignment.CenterVertically) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.instagram),\r\n                contentDescription = \"\",\r\n                modifier = Modifier.size(35.dp)\r\n            )\r\n            Column(modifier = Modifier.padding(start = 10.dp)){\r\n                Text(\r\n                    text = value,\r\n                    fontSize = 20.sp,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n                Text(\r\n                    text = \"instagram\",\r\n                    color = Color.Blue,\r\n                    modifier = Modifier.clickable {\r\n                        uriHandler.openUri(\"https://www.instagram.com/\")\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun ContactUsTwitter(value: String) {\r\n    val uriHandler = LocalUriHandler.current\r\n\r\n    Column(horizontalAlignment = Alignment.CenterHorizontally,\r\n        modifier = Modifier.offset(x = -14.dp)) {\r\n        Row(verticalAlignment = Alignment.CenterVertically) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.twitter),\r\n                contentDescription = \"\",\r\n                modifier = Modifier.size(35.dp)\r\n            )\r\n            Column(modifier = Modifier.padding(start = 10.dp)) {\r\n                Text(\r\n                    text = value,\r\n                    fontSize = 20.sp,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n                Text(\r\n                    text = \"twitter\",\r\n                    color = Color.Blue,\r\n                    modifier = Modifier.clickable {\r\n                        uriHandler.openUri(\"https://twitter.com/\")\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt b/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt	(revision 86fbc823886f7e5be523b4fe01240dc6ffd04278)
+++ b/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt	(date 1725898624713)
@@ -318,7 +318,7 @@
     Column (verticalArrangement = Arrangement.Center,
         horizontalAlignment = Alignment.CenterHorizontally){
         OutlinedTextField(value = value , onValueChange = onChange,
-           // placeholder = { Text(text = fieldLabel, color = Color.Green)},
+            // placeholder = { Text(text = fieldLabel, color = Color.Green)},
             trailingIcon = {
                 Image(painter = painterResource(id = R.drawable.camera), contentDescription ="" ,
                     modifier = Modifier.clickable { navController.navigate("Camera")}
@@ -336,7 +336,7 @@
     Column (verticalArrangement = Arrangement.Center,
         horizontalAlignment = Alignment.CenterHorizontally){
         OutlinedTextField(value = value , onValueChange = onChange,
-           placeholder = { Text(text = fieldLabel, color = Color.Green)},
+            placeholder = { Text(text = fieldLabel, color = Color.Green)},
             keyboardOptions = KeyboardOptions.Default,
             textStyle = TextStyle(color = Color.Black ), modifier = Modifier
                 .height(50.dp)
@@ -354,7 +354,7 @@
     val context = LocalContext.current
     val Incidents= arrayOf("Water", "Electricity", "Pothole", "Other")
     var expanded by remember { mutableStateOf(false) }
-   // var selectedText by remember { mutableStateOf(Incidents[0]) }
+
 
     Box(
         modifier = Modifier
@@ -385,7 +385,7 @@
                     DropdownMenuItem(
                         text = { Text(text = item) },
                         onClick = {
-                           onIncidentSelected(item)
+                            onIncidentSelected(item)
                             expanded = false
                             Toast.makeText(context, item, Toast.LENGTH_SHORT).show()
                         }
@@ -677,4 +677,4 @@
             }
         }
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/civicalertoriginal/Screens/ResetPassword.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal.Screens\r\n\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.civicalertoriginal.Components.BottomButtons\r\nimport com.example.civicalertoriginal.Components.EmailTextFields\r\nimport com.example.civicalertoriginal.Components.InstructionText\r\nimport com.example.civicalertoriginal.Components.LogAndForgotHeader\r\nimport java.util.regex.Pattern\r\n\r\n@Composable\r\nfun ForgotPassword (navController: NavController){\r\n    val context = LocalContext.current\r\n    var email by remember {\r\n        mutableStateOf(\"\")\r\n    }\r\n    Surface (color = Color.White) {\r\n        Column(\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(45.dp),\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(25.dp)\r\n        ) {\r\n\r\n            Spacer(modifier = Modifier.size(20.dp))\r\n\r\n            LogAndForgotHeader(screenLabel = \"Forgot Password?\")\r\n\r\n            InstructionText(value = \"Enter your email to recover your password\" )\r\n            fun validateEmail(email: String): Boolean {\r\n                val emailPattern = \"[a-zA-Z0-9_]+@+\\\\.[a-zA-Z]\"\r\n                return Pattern.matches(emailPattern, email)\r\n            }\r\n\r\n            EmailTextFields(value = email, onChange = {\r\n                if (email.length<=100){\r\n                    email=it\r\n                    validateEmail(email)\r\n                }                                     },\r\n                fieldLabel = \"Enter Email Address\" )\r\n\r\n            \r\n            Spacer(modifier = Modifier.size(10.dp))\r\n            \r\n            BottomButtons(name = \"Reset\") { Toast.makeText(context,\"Email has been sent to $email\",Toast.LENGTH_SHORT).show()\r\n            navController.navigate(\"logIn\")}\r\n            \r\n\r\n        }\r\n    }\r\n    \r\n}\r\n@Preview\r\n@Composable\r\nfun ResetPasswordPreview(){\r\n    val navController = rememberNavController()\r\n    ForgotPassword(navController)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Screens/ResetPassword.kt b/app/src/main/java/com/example/civicalertoriginal/Screens/ResetPassword.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Screens/ResetPassword.kt	(revision 86fbc823886f7e5be523b4fe01240dc6ffd04278)
+++ b/app/src/main/java/com/example/civicalertoriginal/Screens/ResetPassword.kt	(date 1725893693823)
@@ -25,15 +25,17 @@
 import com.example.civicalertoriginal.Components.EmailTextFields
 import com.example.civicalertoriginal.Components.InstructionText
 import com.example.civicalertoriginal.Components.LogAndForgotHeader
+import com.google.firebase.auth.FirebaseAuth
 import java.util.regex.Pattern
 
 @Composable
-fun ForgotPassword (navController: NavController){
+fun ForgotPassword(navController: NavController) {
     val context = LocalContext.current
-    var email by remember {
-        mutableStateOf("")
-    }
-    Surface (color = Color.White) {
+    var email by remember { mutableStateOf("") }
+    var isEmailValid by remember { mutableStateOf(true) }
+    val auth = FirebaseAuth.getInstance()
+
+    Surface(color = Color.White) {
         Column(
             horizontalAlignment = Alignment.CenterHorizontally,
             verticalArrangement = Arrangement.spacedBy(45.dp),
@@ -46,33 +48,62 @@
 
             LogAndForgotHeader(screenLabel = "Forgot Password?")
 
-            InstructionText(value = "Enter your email to recover your password" )
+            InstructionText(value = "Enter your email to recover your password")
+
+            // Email validation function
             fun validateEmail(email: String): Boolean {
-                val emailPattern = "[a-zA-Z0-9_]+@+\\.[a-zA-Z]"
+                val emailPattern = "[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+"
                 return Pattern.matches(emailPattern, email)
             }
 
+            // Email text field
             EmailTextFields(value = email, onChange = {
-                if (email.length<=100){
-                    email=it
-                    validateEmail(email)
-                }                                     },
-                fieldLabel = "Enter Email Address" )
+                email = it
+                isEmailValid = validateEmail(email)
+            }, fieldLabel = "Enter Email Address")
 
-            
+            if (!isEmailValid && email.isNotEmpty()) {
+                InstructionText(value = "Please enter a valid email", )
+            }
+
             Spacer(modifier = Modifier.size(10.dp))
-            
-            BottomButtons(name = "Reset") { Toast.makeText(context,"Email has been sent to $email",Toast.LENGTH_SHORT).show()
-            navController.navigate("logIn")}
-            
+
+            // Reset button
+            BottomButtons(name = "Reset") {
+                if (isEmailValid && email.isNotEmpty()) {
+                    auth.sendPasswordResetEmail(email)
+                        .addOnCompleteListener { task ->
+                            if (task.isSuccessful) {
+                                Toast.makeText(
+                                    context,
+                                    "Email has been sent to $email",
+                                    Toast.LENGTH_SHORT
+                                ).show()
+                                navController.navigate("logIn") // Navigate back to login screen
+                            } else {
+                                Toast.makeText(
+                                    context,
+                                    "Error: ${task.exception?.message}",
+                                    Toast.LENGTH_SHORT
+                                ).show()
+                            }
+                        }
+                } else {
+                    Toast.makeText(
+                        context,
+                        "Please enter a valid email address",
+                        Toast.LENGTH_SHORT
+                    ).show()
+                }
+            }
 
         }
     }
-    
-}
+}
+
 @Preview
 @Composable
-fun ResetPasswordPreview(){
+fun ResetPasswordPreview() {
     val navController = rememberNavController()
     ForgotPassword(navController)
-}
\ No newline at end of file
+}
Index: app/src/main/java/com/example/civicalertoriginal/Screens/LogIn.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontStyle\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.civicalertoriginal.Components.*\r\nimport com.example.civicalertoriginal.R\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\nimport java.util.regex.Pattern\r\n\r\n@Composable\r\nfun LogIn(navController: NavController) {\r\n    val database = Firebase.database\r\n    val myRef = database.getReference(\"Community members\")\r\n    val auth = FirebaseAuth.getInstance()\r\n\r\n    Surface(\r\n        color = Color.White\r\n    ) {\r\n        Column(\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            modifier = Modifier\r\n                .padding(start = 16.dp, end = 16.dp, top = 80.dp)\r\n                .fillMaxSize()\r\n        ) {\r\n            LogAndForgotHeader(screenLabel = \"Login\")\r\n            val context = LocalContext.current\r\n\r\n            Spacer(modifier = Modifier.size(40.dp))\r\n            var email by remember { mutableStateOf(\"\") }\r\n            var password by remember { mutableStateOf(\"\") }\r\n\r\n            Spacer(modifier = Modifier.padding(10.dp))\r\n\r\n            fun validateEmail(email: String): Boolean {\r\n                val emailPattern = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,6}$\"\r\n                return Pattern.matches(emailPattern, email)\r\n            }\r\n\r\n            fun validatePassword(password: String): Boolean {\r\n                return password.length >= 6\r\n            }\r\n\r\n            EmailTextFields(value = email, onChange = {\r\n                if (email.length <= 100) {\r\n                    email = it\r\n                    validateEmail(email)\r\n                }\r\n            }, fieldLabel = \"Enter Email Address\")\r\n\r\n            Spacer(modifier = Modifier.size(10.dp))\r\n            PasswordTextFields(value = password, onChange = {\r\n                if (password.length <= 100) {\r\n                    password = it\r\n                    validatePassword(password)\r\n                }\r\n            }, fieldLabel = \"Enter your password\")\r\n\r\n            Spacer(modifier = Modifier.padding(6.dp))\r\n\r\n            Row(\r\n                verticalAlignment = Alignment.Bottom,\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                modifier = Modifier\r\n                    .padding(20.dp)\r\n                    .align(Alignment.CenterHorizontally)\r\n            ) {\r\n                Text(\r\n                    text = \"Forgot Password?\",\r\n                    modifier = Modifier\r\n                        .clickable { navController.navigate(\"ForgotPassword\") }\r\n                        .padding(end = 25.dp),\r\n                    style = TextStyle(\r\n                        fontStyle = FontStyle.Normal,\r\n                        color = Color.Blue\r\n                    )\r\n                )\r\n                Spacer(modifier = Modifier.size(15.dp))\r\n\r\n                Text(\r\n                    text = \"Register\",\r\n                    modifier = Modifier\r\n                        .clickable { navController.navigate(\"registration\") }\r\n                        .padding(start = 25.dp),\r\n                    style = TextStyle(fontStyle = FontStyle.Normal, color = Color.Blue)\r\n                )\r\n            }\r\n            InstructionText(value = \"Sign with google\")\r\n\r\n            Image(modifier = Modifier\r\n                .size(50.dp, 55.dp)\r\n                .clickable { /* Handle Google Sign-In */ },\r\n                painter = painterResource(id = R.drawable.googlepic),\r\n                contentDescription = \"Google SignIn\"\r\n            )\r\n            Spacer(modifier = Modifier.size(18.dp))\r\n\r\n            BottomButtons(name = \"Sign in\") {\r\n                Log.d(\"LogIn\", \"Email: $email, Password: $password\")\r\n                if (validateEmail(email) && validatePassword(password)) {\r\n                    FirebaseAuth.getInstance().signInWithEmailAndPassword(email, password)\r\n                        .addOnCompleteListener { task ->\r\n                            if (task.isSuccessful) {\r\n                                Toast.makeText(context, \"Sign in Successful\", Toast.LENGTH_SHORT).show()\r\n                                navController.navigate(\"Dashboard\")\r\n                            } else {\r\n                                Log.e(\"LogIn\", \"Authentication failed\", task.exception)\r\n                                Toast.makeText(context, \"Authentication Failed: ${task.exception?.message}\", Toast.LENGTH_SHORT).show()\r\n                            }\r\n                        }\r\n                } else {\r\n                    Toast.makeText(context, \"Invalid email or password\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun LogInPreview() {\r\n    val navController = rememberNavController()\r\n    LogIn(navController)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Screens/LogIn.kt b/app/src/main/java/com/example/civicalertoriginal/Screens/LogIn.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Screens/LogIn.kt	(revision 86fbc823886f7e5be523b4fe01240dc6ffd04278)
+++ b/app/src/main/java/com/example/civicalertoriginal/Screens/LogIn.kt	(date 1725898226669)
@@ -137,4 +137,4 @@
 fun LogInPreview() {
     val navController = rememberNavController()
     LogIn(navController)
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal.Screens\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.util.Patterns\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Checkbox\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.civicalertoriginal.Components.EmailTextFields\r\nimport com.example.civicalertoriginal.Components.InstructionText\r\nimport com.example.civicalertoriginal.Components.LogBottomButtons\r\nimport com.example.civicalertoriginal.Components.NumberTextFields\r\nimport com.example.civicalertoriginal.Components.PasswordTextFields\r\nimport com.example.civicalertoriginal.Components.SignUpText\r\nimport com.example.civicalertoriginal.Components.TextFields\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\n\r\n\r\ndata class User(\r\n    val firstName: String = \"\",\r\n    val lastName: String = \"\",\r\n    val email: String =\"\",\r\n    val phoneNumber: String=\"\",\r\n    val password: String=\"\"\r\n)\r\n\r\n@SuppressLint(\"SuspiciousIndentation\")\r\n@Composable\r\nfun Registration(navController: NavController) {\r\n\r\n    val context = LocalContext.current\r\n    val scrollable = rememberScrollState()\r\n    val database = Firebase.database\r\n    val myRef = database.getReference(\"Community members\")\r\n    val auth = FirebaseAuth.getInstance();\r\n\r\n    // Variables needed for user registration\r\n    var firstName by remember { mutableStateOf(\"\") }\r\n    var lastName by remember { mutableStateOf(\"\") }\r\n    var email by remember { mutableStateOf(\"\") }\r\n    var phoneNumber by remember { mutableStateOf(\"\") }\r\n    var password by remember { mutableStateOf(\"\") }\r\n    var confirmPassword by remember { mutableStateOf(\"\") }\r\n    var passwordsMatch by remember { mutableStateOf(true) }\r\n    var isFormValid by remember { mutableStateOf(false) }\r\n    var showDialog by remember { mutableStateOf(false) }\r\n    var registrationMessage by remember { mutableStateOf(\"\") }\r\n    var isEmailValid by remember { mutableStateOf(true) }\r\n    var isPasswordValid by remember { mutableStateOf(true) }\r\n    var hasUpperCase by remember { mutableStateOf(false) }\r\n    var hasDigit by remember { mutableStateOf(false) }\r\n    var hasSymbol by remember { mutableStateOf(false) }\r\n    var hasMinLength by remember { mutableStateOf(false) }\r\n\r\n    // Character limit in text fields\r\n    val maxName = 50\r\n    val maxEmail = 100\r\n    val maxNumber = 10\r\n    val maxPassword = 100\r\n\r\n    // Regex patterns\r\n    val emailPattern = Patterns.EMAIL_ADDRESS.toRegex()\r\n    val passwordPattern = Regex(\"^(?=.*[A-Za-z])(?=.*\\\\d)(?=.*[@\\$!%*#@?&])[A-Za-z\\\\d@\\$!%*#?@&]{8,}$\")\r\n\r\n    // Validate entered details\r\n    fun validateForm() {\r\n        isEmailValid = emailPattern.matches(email)\r\n        isPasswordValid = passwordPattern.matches(password)\r\n        hasUpperCase = password.any { it.isUpperCase() }\r\n        hasDigit = password.any { it.isDigit() }\r\n        hasSymbol = password.any { !it.isLetterOrDigit() }\r\n        hasMinLength = password.length >= 8\r\n\r\n        isFormValid = firstName.all { it.isLetter() } && firstName.isNotEmpty() && firstName.length <= maxName &&\r\n                lastName.all { it.isLetter() } && lastName.isNotEmpty() && lastName.length <= maxName &&\r\n                email.isNotEmpty() && email.length <= maxEmail && isEmailValid &&\r\n                phoneNumber.all { it.isDigit() } && phoneNumber.length == maxNumber &&\r\n                password.isNotEmpty() && password.length <= maxPassword && isPasswordValid &&\r\n                confirmPassword.isNotEmpty() && confirmPassword == password\r\n    }\r\n   fun encodeEmail(email: String): String {\r\n        return email.replace(\".\", \"_dot_\") // Replace '.' with '_dot_' or use any suitable encoding method\r\n    }\r\n    fun checkEmailExists(email:String, onResult:(Boolean)-> Unit){\r\n        val formattedEmail = encodeEmail(email)\r\n        val myRef = Firebase.database.getReference(\"Community members\").child(formattedEmail)\r\n\r\n        myRef.addListenerForSingleValueEvent(object : ValueEventListener{\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                if (snapshot.exists()){\r\n                    onResult(true)\r\n                }else{\r\n                    onResult(false)\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                onResult(false)\r\n                println(\"Failed to check user\")\r\n            }\r\n        })\r\n    }\r\n\r\n    fun saveUser(user: User) {\r\n       //val userId = user.email\r\n        val userId = encodeEmail(user.email)\r\n       // val userId = user.firstName\r\n        myRef.child(userId).setValue(user).addOnCompleteListener { task ->\r\n            if (task.isSuccessful) {\r\n                // Handle success\r\n                registrationMessage = \"Successfully registered!\"\r\n                println(\"User saved successfully\")\r\n            } else {\r\n                // Handle failure\r\n                task.exception?.let {\r\n                    registrationMessage = \"Error saving user: ${it.message}\"\r\n                    println(\"Error saving user: ${it.message}\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fun saveByEmail(user : User){\r\n        auth.createUserWithEmailAndPassword(email, password);\r\n    }\r\n    fun registerUser() {\r\n        checkEmailExists(email) { exists ->\r\n            if (exists) {\r\n                registrationMessage = \"Email already exists in the system\"\r\n            } else {\r\n                val user = User(\r\n                    email = email,\r\n                    firstName = firstName,\r\n                    lastName = lastName,\r\n                    phoneNumber = phoneNumber,\r\n                    password = password\r\n                )\r\n                saveUser(user)\r\n                saveByEmail(user)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    Surface(color = Color.White) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(20.dp)\r\n                .verticalScroll(scrollable),\r\n            verticalArrangement = Arrangement.spacedBy(18.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n\r\n            Spacer(modifier = Modifier.size(12.dp))\r\n\r\n            InstructionText(value = \"Sign Up\")\r\n\r\n            Spacer(modifier = Modifier.size(12.dp))\r\n\r\n            TextFields(value = firstName,\r\n                onChange = {\r\n                    if (it.length <= maxName) {\r\n                        firstName = it\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"First name\"\r\n            )\r\n\r\n            TextFields(value = lastName,\r\n                onChange = {\r\n                    if (it.length <= maxName) {\r\n                        lastName = it\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Last name\"\r\n            )\r\n\r\n            EmailTextFields(value = email,\r\n                onChange = {\r\n                    if (it.length <= maxEmail) {\r\n                        email = it\r\n                        validateForm()\r\n                    }\r\n                },\r\n                fieldLabel = \"Email Address\"\r\n            )\r\n\r\n            if (!isEmailValid && email.isNotEmpty()) {\r\n                Text(\r\n                    text = \"Please enter a valid email address\",\r\n                    color = Color.Red\r\n                )\r\n            }\r\n\r\n            NumberTextFields(value = phoneNumber,\r\n                onChange = {\r\n                    if (it.length <= maxNumber) {\r\n                        phoneNumber = it\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Phone number\"\r\n            )\r\n\r\n            PasswordTextFields(value = password,\r\n                onChange = {\r\n                    if (it.length <= maxPassword) {\r\n                        password = it\r\n                        passwordsMatch = confirmPassword == password\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Password\"\r\n            )\r\n\r\n            if (password.isNotEmpty())Column (\r\n\r\n            ){\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasUpperCase, onCheckedChange = null)\r\n                    Text(text = \"Must have at least one capital letter\"\r\n                    , fontSize = 12.sp)\r\n                }\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasDigit, onCheckedChange = null)\r\n                    Text(text = \"Must have at least one digit\",fontSize = 12.sp)\r\n                }\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasSymbol, onCheckedChange = null)\r\n                    Text(text = \"Must have at least one symbol\",fontSize = 12.sp)\r\n                }\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasMinLength, onCheckedChange = null)\r\n                    Text(text = \"Must have at least 8 characters\",fontSize = 12.sp)\r\n                }\r\n            }\r\n\r\n            PasswordTextFields(value = confirmPassword,\r\n                onChange = {\r\n                    if (it.length <= maxPassword) {\r\n                        confirmPassword = it\r\n                        passwordsMatch = confirmPassword == password\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Confirm password\"\r\n            )\r\n\r\n            if (!isPasswordValid && password.isNotEmpty()) {\r\n                Text(\r\n                    text = \"Enter a valid password\",\r\n                    color = Color.Red\r\n                )\r\n            }\r\n\r\n            if (!passwordsMatch) {\r\n                Text(\r\n                    text = \"Passwords do not match\",\r\n                    color = Color.Red\r\n                )\r\n            }\r\n\r\n            Row(\r\n                modifier = Modifier.padding(end = 20.dp)\r\n            ) {\r\n                SignUpText(value = \"Do you give us permission to use your details for marketing purposes\")\r\n            }\r\n            Row(modifier = Modifier.padding(end = 20.dp)) {\r\n                SignUpText(value = \"Do you agree to Terms & Conditions of the app\")\r\n            }\r\n\r\n            Spacer(modifier = Modifier.size(16.dp))\r\n\r\n            LogBottomButtons(\r\n                name = \"Register\",\r\n                onClick = { showDialog = true\r\n                          registerUser()},\r\n                enabled = isFormValid\r\n            )\r\n\r\n        }\r\n        if (showDialog) {\r\n            AlertDialog(\r\n                onDismissRequest = { showDialog = false },\r\n                title = { Text(\"Confirm Registration\") },\r\n                text = { Text(\"Are you sure you want to register with these details?\") },\r\n                confirmButton = {\r\n                    Button(modifier = Modifier\r\n                        .padding(start = 20.dp)\r\n                        .width(100.dp),\r\n                        colors = ButtonDefaults.buttonColors(Color.Green),\r\n                        onClick = { showDialog = false\r\n                        registerUser()}\r\n                    ) {\r\n                        Text(\"Confirm\",\r\n                            color = Color.Black)\r\n                    }\r\n                },\r\n                dismissButton = {\r\n                    Button(modifier = Modifier\r\n                        .padding(end = 20.dp)\r\n                        .width(100.dp),\r\n                        colors = ButtonDefaults.buttonColors(Color.Green),\r\n                        onClick = { showDialog = false }) {\r\n                        Text(\"Cancel\",\r\n                            color = Color.Black)\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (registrationMessage.isNotEmpty()) {\r\n            AlertDialog(\r\n                onDismissRequest = { registrationMessage = \"\" },\r\n                title = { Text(\"Registration\") },\r\n                text = { Text(registrationMessage) },\r\n                confirmButton = {\r\n                    Button(colors = ButtonDefaults.buttonColors(Color.Green),\r\n                        onClick = {\r\n                            registrationMessage = \"\"\r\n                            navController.navigate(\"Login\")\r\n                        }\r\n                    ) {\r\n                        Text(\"OK\",\r\n                            color = Color.Black)\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n@Preview\r\n@Composable\r\nfun RegistrationPreview() {\r\n    val navController = rememberNavController()\r\n    Registration(navController)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt b/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt	(revision 86fbc823886f7e5be523b4fe01240dc6ffd04278)
+++ b/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt	(date 1725893125016)
@@ -2,6 +2,7 @@
 
 import android.annotation.SuppressLint
 import android.util.Patterns
+import android.widget.Toast
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
@@ -150,9 +151,38 @@
             }
         }
     }
-    fun saveByEmail(user : User){
-        auth.createUserWithEmailAndPassword(email, password);
+    fun saveByEmail() {
+        auth.createUserWithEmailAndPassword(email, password)
+            .addOnCompleteListener { task ->
+                if (task.isSuccessful) {
+                    // Send verification email
+                    auth.currentUser?.sendEmailVerification()
+                        ?.addOnCompleteListener { emailTask ->
+                            if (emailTask.isSuccessful) {
+                                Toast.makeText(
+                                    context,
+                                    "Please check your email inbox to verify your email address.",
+                                    Toast.LENGTH_LONG
+                                ).show()
+                            } else {
+                                Toast.makeText(
+                                    context,
+                                    "Error: Failed to send verification email: ${emailTask.exception?.message}",
+                                    Toast.LENGTH_LONG
+                                ).show()
+                            }
+                        }
+                } else {
+                    // Handle registration failure
+                    Toast.makeText(
+                        context,
+                        "Registration failed: ${task.exception?.message}",
+                        Toast.LENGTH_LONG
+                    ).show()
+                }
+            }
     }
+
     fun registerUser() {
         checkEmailExists(email) { exists ->
             if (exists) {
@@ -166,7 +196,7 @@
                     password = password
                 )
                 saveUser(user)
-                saveByEmail(user)
+                saveByEmail()
             }
         }
     }
@@ -301,8 +331,7 @@
 
             LogBottomButtons(
                 name = "Register",
-                onClick = { showDialog = true
-                          registerUser()},
+                onClick = { showDialog = true },
                 enabled = isFormValid
             )
 
@@ -318,10 +347,10 @@
                         .width(100.dp),
                         colors = ButtonDefaults.buttonColors(Color.Green),
                         onClick = { showDialog = false
-                        registerUser()}
+                        registerUser()
+                        }
                     ) {
-                        Text("Confirm",
-                            color = Color.Black)
+                        Text("Confirm", color = Color.Black)
                     }
                 },
                 dismissButton = {
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n    <string name=\"app_name\">CivicAlertOriginal</string>\r\n    <string name=\"first_fragment_label\">First Fragment</string>\r\n    <string name=\"second_fragment_label\">Second Fragment</string>\r\n    <string name=\"take_photo\">Take Picture\\n</string>\r\n    <string name=\"upload_picture\">Upload Picture</string>\r\n    <string name=\"mapbox_access_token\" translatable=\"false\" tools:ignore=\"UnusedResources\">sk.eyJ1Ijoibnlpa29kZWFydGtpZCIsImEiOiJjbTA2ZjBkemowdDBsMmtzYnppMnl3Mno5In0._msAzoio9GC2Abrzshe05w</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 86fbc823886f7e5be523b4fe01240dc6ffd04278)
+++ b/app/src/main/res/values/strings.xml	(date 1725896691620)
@@ -4,5 +4,6 @@
     <string name="second_fragment_label">Second Fragment</string>
     <string name="take_photo">Take Picture\n</string>
     <string name="upload_picture">Upload Picture</string>
+    <string name="Client_id" >858192785417-e2pm5clll7mdup68aflkf9vprttrbvpj.apps.googleusercontent.com</string>
     <string name="mapbox_access_token" translatable="false" tools:ignore="UnusedResources">sk.eyJ1Ijoibnlpa29kZWFydGtpZCIsImEiOiJjbTA2ZjBkemowdDBsMmtzYnppMnl3Mno5In0._msAzoio9GC2Abrzshe05w</string>
 </resources>
\ No newline at end of file
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.4.1\"\r\ncameraCore = \"1.3.4\"\r\ncameraViewVersion = \"1.1.0\"\r\ncoilCompose = \"1.4.0\"\r\nkotlin = \"1.9.0\"\r\ncoreKtx = \"1.13.1\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.1.5\"\r\nespressoCore = \"3.5.1\"\r\nlifecycleRuntimeKtx = \"2.8.1\"\r\nactivityCompose = \"1.9.0\"\r\ncomposeBom = \"2023.08.00\"\r\nfirebaseCommonKtx = \"21.0.0\"\r\nnavigationCompose = \"2.7.7\"\r\ngoogleGmsGoogleServices = \"4.4.2\"\r\nfirebaseDatabase = \"21.0.0\"\r\nfirebaseAuth = \"23.0.0\"\r\nappcompat = \"1.7.0\"\r\nmaterial = \"1.12.0\"\r\nactivity = \"1.9.0\"\r\nconstraintlayout = \"2.1.4\"\r\ncameraView = \"1.3.4\"\r\nruntimeLivedata = \"1.6.8\"\r\n\r\n[libraries]\r\nandroidx-camera-camera2 = { module = \"androidx.camera:camera-camera2\", version.ref = \"cameraCore\" }\r\nandroidx-camera-core = { module = \"androidx.camera:camera-core\", version.ref = \"cameraCore\" }\r\nandroidx-camera-extensions = { module = \"androidx.camera:camera-extensions\", version.ref = \"cameraViewVersion\" }\r\nandroidx-camera-lifecycle = { module = \"androidx.camera:camera-lifecycle\", version.ref = \"cameraCore\" }\r\nandroidx-camera-view-v110 = { module = \"androidx.camera:camera-view\", version.ref = \"cameraViewVersion\" }\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\ncoil-compose = { module = \"io.coil-kt:coil-compose\", version.ref = \"coilCompose\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\r\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\r\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\r\nandroidx-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\r\nandroidx-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\r\nandroidx-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\r\nandroidx-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\r\nandroidx-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\r\nandroidx-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\r\nandroidx-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\r\nfirebase-common-ktx = { group = \"com.google.firebase\", name = \"firebase-common-ktx\", version.ref = \"firebaseCommonKtx\" }\r\nandroidx-navigation-compose = { group = \"androidx.navigation\", name = \"navigation-compose\", version.ref = \"navigationCompose\" }\r\nfirebase-database = { group = \"com.google.firebase\", name = \"firebase-database\", version.ref = \"firebaseDatabase\" }\r\nfirebase-auth = { group = \"com.google.firebase\", name = \"firebase-auth\", version.ref = \"firebaseAuth\" }\r\nandroidx-appcompat = { group = \"androidx.appcompat\", name = \"appcompat\", version.ref = \"appcompat\" }\r\nmaterial = { group = \"com.google.android.material\", name = \"material\", version.ref = \"material\" }\r\nandroidx-activity = { group = \"androidx.activity\", name = \"activity\", version.ref = \"activity\" }\r\nandroidx-constraintlayout = { group = \"androidx.constraintlayout\", name = \"constraintlayout\", version.ref = \"constraintlayout\" }\r\nandroidx-camera-view = { group = \"androidx.camera\", name = \"camera-view\", version.ref = \"cameraView\" }\r\nandroidx-runtime-livedata = { group = \"androidx.compose.runtime\", name = \"runtime-livedata\", version.ref = \"runtimeLivedata\" }\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\njetbrains-kotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\ngoogle-gms-google-services = { id = \"com.google.gms.google-services\", version.ref = \"googleGmsGoogleServices\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision 86fbc823886f7e5be523b4fe01240dc6ffd04278)
+++ b/gradle/libs.versions.toml	(date 1725894983815)
@@ -22,6 +22,8 @@
 constraintlayout = "2.1.4"
 cameraView = "1.3.4"
 runtimeLivedata = "1.6.8"
+material3Android = "1.3.0"
+benchmarkMacro = "1.3.0"
 
 [libraries]
 androidx-camera-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "cameraCore" }
@@ -54,6 +56,8 @@
 androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
 androidx-camera-view = { group = "androidx.camera", name = "camera-view", version.ref = "cameraView" }
 androidx-runtime-livedata = { group = "androidx.compose.runtime", name = "runtime-livedata", version.ref = "runtimeLivedata" }
+androidx-material3-android = { group = "androidx.compose.material3", name = "material3-android", version.ref = "material3Android" }
+androidx-benchmark-macro = { group = "androidx.benchmark", name = "benchmark-macro", version.ref = "benchmarkMacro" }
 
 [plugins]
 android-application = { id = "com.android.application", version.ref = "agp" }
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.jetbrains.kotlin.android)\r\n    alias(libs.plugins.google.gms.google.services)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.civicalertoriginal\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.civicalertoriginal\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables {\r\n            useSupportLibrary = true\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"1.8\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n    composeOptions {\r\n        kotlinCompilerExtensionVersion = \"1.5.1\"\r\n    }\r\n    packaging {\r\n        resources {\r\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n    implementation(libs.firebase.common.ktx)\r\n    implementation(libs.androidx.navigation.compose)\r\n    implementation(libs.firebase.database)\r\n    implementation(libs.firebase.auth)\r\n    implementation(libs.androidx.appcompat)\r\n    implementation(libs.material)\r\n    implementation (libs.androidx.camera.core)\r\n    implementation (libs.androidx.camera.camera2)\r\n    implementation (libs.androidx.camera.lifecycle)\r\n    implementation (libs.androidx.camera.view.v110)\r\n    implementation (libs.androidx.camera.extensions)\r\n\r\n    implementation (\"com.mapbox.maps:android:11.6.0\") {\r\n        exclude (group = \"group_name\", module = \"module_name\")\r\n    }\r\n    implementation (\"com.mapbox.mapboxsdk:mapbox-sdk-services:6.6.0\"){\r\n        exclude (group = \"group_name\", module = \"module_name\")\r\n    }\r\n\r\n\r\n\r\n    implementation(libs.androidx.activity)\r\n    implementation(libs.coil.compose)\r\n    implementation(libs.androidx.constraintlayout)\r\n    implementation(libs.androidx.camera.view)\r\n    implementation(libs.androidx.runtime.livedata)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 86fbc823886f7e5be523b4fe01240dc6ffd04278)
+++ b/app/build.gradle.kts	(date 1725894983832)
@@ -85,6 +85,8 @@
     implementation(libs.androidx.constraintlayout)
     implementation(libs.androidx.camera.view)
     implementation(libs.androidx.runtime.livedata)
+    implementation(libs.androidx.material3.android)
+    implementation(libs.androidx.benchmark.macro)
     testImplementation(libs.junit)
     androidTestImplementation(libs.androidx.junit)
     androidTestImplementation(libs.androidx.espresso.core)
