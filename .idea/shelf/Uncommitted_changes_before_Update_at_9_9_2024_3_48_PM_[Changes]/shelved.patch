Index: app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal.Screens\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.util.Patterns\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Checkbox\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.civicalertoriginal.Components.EmailTextFields\r\nimport com.example.civicalertoriginal.Components.InstructionText\r\nimport com.example.civicalertoriginal.Components.LogBottomButtons\r\nimport com.example.civicalertoriginal.Components.NumberTextFields\r\nimport com.example.civicalertoriginal.Components.PasswordTextFields\r\nimport com.example.civicalertoriginal.Components.SignUpText\r\nimport com.example.civicalertoriginal.Components.TextFields\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\n\r\n\r\ndata class User(\r\n    val firstName: String = \"\",\r\n    val lastName: String = \"\",\r\n    val email: String =\"\",\r\n    val phoneNumber: String=\"\",\r\n    val password: String=\"\"\r\n)\r\n\r\n@SuppressLint(\"SuspiciousIndentation\")\r\n@Composable\r\nfun Registration(navController: NavController) {\r\n\r\n    val database = Firebase.database\r\n    val myRef = database.getReference(\"Community members\")\r\n    val auth = FirebaseAuth.getInstance();\r\n    val context = LocalContext.current\r\n    val scrollable = rememberScrollState()\r\n\r\n    // Variables needed for user registration\r\n    var firstName by remember { mutableStateOf(\"\") }\r\n    var lastName by remember { mutableStateOf(\"\") }\r\n    var email by remember { mutableStateOf(\"\") }\r\n    var phoneNumber by remember { mutableStateOf(\"\") }\r\n    var password by remember { mutableStateOf(\"\") }\r\n    var confirmPassword by remember { mutableStateOf(\"\") }\r\n    var passwordsMatch by remember { mutableStateOf(true) }\r\n    var isFormValid by remember { mutableStateOf(false) }\r\n    var showDialog by remember { mutableStateOf(false) }\r\n    var registrationMessage by remember { mutableStateOf(\"\") }\r\n    var isEmailValid by remember { mutableStateOf(true) }\r\n    var isPasswordValid by remember { mutableStateOf(true) }\r\n    var hasUpperCase by remember { mutableStateOf(false) }\r\n    var hasDigit by remember { mutableStateOf(false) }\r\n    var hasSymbol by remember { mutableStateOf(false) }\r\n    var hasMinLength by remember { mutableStateOf(false) }\r\n\r\n    // Character limit in text fields\r\n    val maxName = 50\r\n    val maxEmail = 100\r\n    val maxNumber = 10\r\n    val maxPassword = 100\r\n\r\n    // Regex patterns\r\n    val emailPattern = Patterns.EMAIL_ADDRESS.toRegex()\r\n    val passwordPattern = Regex(\"^(?=.*[A-Za-z])(?=.*\\\\d)(?=.*[@\\$!%*#@?&])[A-Za-z\\\\d@\\$!%*#?@&]{8,}$\")\r\n\r\n    // Validate entered details\r\n    fun validateForm() {\r\n        isEmailValid = emailPattern.matches(email)\r\n        isPasswordValid = passwordPattern.matches(password)\r\n        hasUpperCase = password.any { it.isUpperCase() }\r\n        hasDigit = password.any { it.isDigit() }\r\n        hasSymbol = password.any { !it.isLetterOrDigit() }\r\n        hasMinLength = password.length >= 8\r\n\r\n        isFormValid = firstName.all { it.isLetter() } && firstName.isNotEmpty() && firstName.length <= maxName &&\r\n                lastName.all { it.isLetter() } && lastName.isNotEmpty() && lastName.length <= maxName &&\r\n                email.isNotEmpty() && email.length <= maxEmail && isEmailValid &&\r\n                phoneNumber.all { it.isDigit() } && phoneNumber.length == maxNumber &&\r\n                password.isNotEmpty() && password.length <= maxPassword && isPasswordValid &&\r\n                confirmPassword.isNotEmpty() && confirmPassword == password\r\n    }\r\n    fun saveUser(user: User) {\r\n        val userId = myRef.push().key ?: return\r\n        myRef.child(userId).setValue(user).addOnCompleteListener { task ->\r\n            if (task.isSuccessful) {\r\n\r\n\r\n                // Handle success\r\n                registrationMessage = \"Successfully registered!\"\r\n                println(\"User saved successfully\")\r\n            } else {\r\n                // Handle failure\r\n                task.exception?.let {\r\n                    registrationMessage = \"Error saving user: ${it.message}\"\r\n                    println(\"Error saving user: ${it.message}\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fun saveByEmail(){\r\n        auth.createUserWithEmailAndPassword(email, password).addOnCompleteListener {\r\n        if (it.isSuccessful){\r\n            //send Email\r\n            auth.currentUser?.sendEmailVerification()\r\n                ?.addOnCompleteListener{\r\n                    Toast.makeText(context, \"Please check your Email inbox sent to verify your email address\",\r\n                        Toast.LENGTH_SHORT).show()\r\n\r\n                }\r\n        }}\r\n    }\r\n\r\n\r\n    Surface(color = Color.White) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(20.dp)\r\n                .verticalScroll(scrollable),\r\n            verticalArrangement = Arrangement.spacedBy(18.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n\r\n            Spacer(modifier = Modifier.size(12.dp))\r\n\r\n            InstructionText(value = \"Sign Up\")\r\n\r\n            Spacer(modifier = Modifier.size(12.dp))\r\n\r\n            TextFields(value = firstName,\r\n                onChange = {\r\n                    if (it.length <= maxName) {\r\n                        firstName = it\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"First name\"\r\n            )\r\n\r\n            TextFields(value = lastName,\r\n                onChange = {\r\n                    if (it.length <= maxName) {\r\n                        lastName = it\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Last name\"\r\n            )\r\n\r\n            EmailTextFields(value = email,\r\n                onChange = {\r\n                    if (it.length <= maxEmail) {\r\n                        email = it\r\n                        validateForm()\r\n                    }\r\n                },\r\n                fieldLabel = \"Email Address\"\r\n            )\r\n\r\n            if (!isEmailValid && email.isNotEmpty()) {\r\n                Text(\r\n                    text = \"Please enter a valid email address\",\r\n                    color = Color.Red\r\n                )\r\n            }\r\n\r\n            NumberTextFields(value = phoneNumber,\r\n                onChange = {\r\n                    if (it.length <= maxNumber) {\r\n                        phoneNumber = it\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Phone number\"\r\n            )\r\n\r\n            PasswordTextFields(value = password,\r\n                onChange = {\r\n                    if (it.length <= maxPassword) {\r\n                        password = it\r\n                        passwordsMatch = confirmPassword == password\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Password\"\r\n            )\r\n\r\n            if (password.isNotEmpty())Column (\r\n\r\n            ){\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasUpperCase, onCheckedChange = null)\r\n                    Text(text = \"Must have at least one capital letter\"\r\n                    , fontSize = 12.sp)\r\n                }\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasDigit, onCheckedChange = null)\r\n                    Text(text = \"Must have at least one digit\",fontSize = 12.sp)\r\n                }\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasSymbol, onCheckedChange = null)\r\n                    Text(text = \"Must have at least one symbol\",fontSize = 12.sp)\r\n                }\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Checkbox(checked = hasMinLength, onCheckedChange = null)\r\n                    Text(text = \"Must have at least 8 characters\",fontSize = 12.sp)\r\n                }\r\n            }\r\n\r\n            PasswordTextFields(value = confirmPassword,\r\n                onChange = {\r\n                    if (it.length <= maxPassword) {\r\n                        confirmPassword = it\r\n                        passwordsMatch = confirmPassword == password\r\n                        validateForm()\r\n                    }\r\n                }, fieldLabel = \"Confirm password\"\r\n            )\r\n\r\n            if (!isPasswordValid && password.isNotEmpty()) {\r\n                Text(\r\n                    text = \"Enter a valid password\",\r\n                    color = Color.Red\r\n                )\r\n            }\r\n\r\n            if (!passwordsMatch) {\r\n                Text(\r\n                    text = \"Passwords do not match\",\r\n                    color = Color.Red\r\n                )\r\n            }\r\n\r\n            Row {\r\n                SignUpText(value = \"Do you give us permission to use your details for marketing purposes\")\r\n            }\r\n            Row {\r\n                SignUpText(value = \"Do you agree to Terms & Conditions of the app\")\r\n            }\r\n\r\n            Spacer(modifier = Modifier.size(16.dp))\r\n\r\n            LogBottomButtons(\r\n                name = \"Register\",\r\n                onClick = { showDialog = true },\r\n                enabled = isFormValid\r\n            )\r\n\r\n        }\r\n        if (showDialog) {\r\n            AlertDialog(\r\n                onDismissRequest = { showDialog = false },\r\n                title = { Text(\"Confirm Registration\") },\r\n                text = { Text(\"Are you sure you want to register with these details?\") },\r\n                confirmButton = {\r\n                    Button(modifier = Modifier\r\n                        .padding(start = 20.dp)\r\n                        .width(100.dp),\r\n                        colors = ButtonDefaults.buttonColors(Color.Green),\r\n                        onClick = {\r\n                                val user = User(firstName = firstName,\r\n                                    lastName = lastName,\r\n                                    email = email,\r\n                                    phoneNumber = phoneNumber,\r\n                                    password = password)\r\n                                    saveUser(user)\r\n                            saveByEmail()\r\n                                showDialog = false\r\n\r\n\r\n                            // method to save data to database\r\n\r\n                        }\r\n                    ) {\r\n                        Text(\"Confirm\",\r\n                            color = Color.Black)\r\n                    }\r\n                },\r\n                dismissButton = {\r\n                    Button(modifier = Modifier\r\n                        .padding(end = 20.dp)\r\n                        .width(100.dp),\r\n                        colors = ButtonDefaults.buttonColors(Color.Green),\r\n                        onClick = { showDialog = false }) {\r\n                        Text(\"Cancel\",\r\n                            color = Color.Black)\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (registrationMessage.isNotEmpty()) {\r\n            AlertDialog(\r\n                onDismissRequest = { registrationMessage = \"\" },\r\n                title = { Text(\"Registration\") },\r\n                text = { Text(registrationMessage) },\r\n                confirmButton = {\r\n                    Button(colors = ButtonDefaults.buttonColors(Color.Green),\r\n                        onClick = {\r\n                            registrationMessage = \"\"\r\n                            navController.navigate(\"Login\")\r\n                        }\r\n                    ) {\r\n                        Text(\"OK\",\r\n                            color = Color.Black)\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n@Preview\r\n@Composable\r\nfun RegistrationPreview() {\r\n    val navController = rememberNavController()\r\n    Registration(navController)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt b/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt	(revision 9f30770b2dfd8386e60c1c6f8677ec3a22ede89c)
+++ b/app/src/main/java/com/example/civicalertoriginal/Screens/Registration.kt	(date 1725889633753)
@@ -125,18 +125,38 @@
             }
         }
     }
-    fun saveByEmail(){
-        auth.createUserWithEmailAndPassword(email, password).addOnCompleteListener {
-        if (it.isSuccessful){
-            //send Email
-            auth.currentUser?.sendEmailVerification()
-                ?.addOnCompleteListener{
-                    Toast.makeText(context, "Please check your Email inbox sent to verify your email address",
-                        Toast.LENGTH_SHORT).show()
-
+    fun saveByEmail() {
+        auth.createUserWithEmailAndPassword(email, password)
+            .addOnCompleteListener { task ->
+                if (task.isSuccessful) {
+                    // Send verification email
+                    auth.currentUser?.sendEmailVerification()
+                        ?.addOnCompleteListener { emailTask ->
+                            if (emailTask.isSuccessful) {
+                                Toast.makeText(
+                                    context,
+                                    "Please check your email inbox to verify your email address.",
+                                    Toast.LENGTH_LONG
+                                ).show()
+                            } else {
+                                Toast.makeText(
+                                    context,
+                                    "Error: Failed to send verification email: ${emailTask.exception?.message}",
+                                    Toast.LENGTH_LONG
+                                ).show()
+                            }
+                        }
+                } else {
+                    // Handle registration failure
+                    Toast.makeText(
+                        context,
+                        "Registration failed: ${task.exception?.message}",
+                        Toast.LENGTH_LONG
+                    ).show()
                 }
-        }}
+            }
     }
+
 
 
     Surface(color = Color.White) {
@@ -286,8 +306,9 @@
                                     lastName = lastName,
                                     email = email,
                                     phoneNumber = phoneNumber,
-                                    password = password)
-                                    saveUser(user)
+                                    password = password
+                                )
+                            saveUser(user)
                             saveByEmail()
                                 showDialog = false
 
@@ -305,9 +326,9 @@
                         .padding(end = 20.dp)
                         .width(100.dp),
                         colors = ButtonDefaults.buttonColors(Color.Green),
-                        onClick = { showDialog = false }) {
-                        Text("Cancel",
-                            color = Color.Black)
+                        onClick = { showDialog = false })
+                    {
+                        Text("Cancel", color = Color.Black)
                     }
                 }
             )
Index: app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal.Components\r\n\r\nimport LogIn\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.rememberNavController\r\nimport civicalertoriginal.Screen.MakeReports\r\nimport com.example.civicalertoriginal.Screens.ContactUs\r\nimport com.example.civicalertoriginal.Screens.Dashboard\r\nimport com.example.civicalertoriginal.Screens.ForgotPassword\r\nimport com.example.civicalertoriginal.Screens.HelpAndSupport\r\nimport com.example.civicalertoriginal.Screens.MapBoxScreen\r\nimport com.example.civicalertoriginal.Screens.Registration\r\nimport com.example.civicalertoriginal.Screens.UpdateProfile\r\nimport com.example.civicalertoriginal.Screens.ViewReports\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun Navigation() {\r\n    val navController = rememberNavController()\r\n\r\n    // State for location details\r\n    var locationName by remember { mutableStateOf(\"\") }\r\n    var latitude by remember { mutableStateOf(0.0) }\r\n    var longitude by remember { mutableStateOf(0.0) }\r\n\r\n    NavHost(navController = navController, startDestination = \"makeReports\") {\r\n        composable(\"registration\") {\r\n            Registration(navController)\r\n        }\r\n        composable(\"forgotPassword\") {\r\n            ForgotPassword(navController)\r\n        }\r\n        composable(\"login\") {\r\n            LogIn(navController)\r\n        }\r\n        composable(\"Dashboard\") {\r\n            Dashboard(navController)\r\n        }\r\n        composable(\"makeReports\") {\r\n            MakeReports(navController)\r\n        }\r\n        composable(\"userProfile\") {\r\n            UpdateProfile(navController)\r\n        }\r\n        composable(\"emergencyContacts\") {\r\n            ContactUs(navController)\r\n        }\r\n        composable(\"Viewreports\") {\r\n            ViewReports(navController)\r\n        }\r\n        composable(\"helpSupport\") {\r\n            HelpAndSupport(navController)\r\n        }\r\n        composable(\"mapbox\") {\r\n            MapBoxScreen(navController = navController) { selectedLocation ->\r\n\r\n                navController.previousBackStackEntry?.savedStateHandle?.set(\"selectedLocation\", selectedLocation)\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt b/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt	(revision 9f30770b2dfd8386e60c1c6f8677ec3a22ede89c)
+++ b/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt	(date 1725889633752)
@@ -31,7 +31,7 @@
     var latitude by remember { mutableStateOf(0.0) }
     var longitude by remember { mutableStateOf(0.0) }
 
-    NavHost(navController = navController, startDestination = "makeReports") {
+    NavHost(navController = navController, startDestination = "login") {
         composable("registration") {
             Registration(navController)
         }
