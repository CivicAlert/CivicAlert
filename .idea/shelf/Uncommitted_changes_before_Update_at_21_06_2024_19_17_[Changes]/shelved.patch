Index: app/src/main/java/com/example/civicalertoriginal/Components/Components.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal.Components\r\n\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Info\r\nimport androidx.compose.material.icons.filled.LocationOn\r\nimport androidx.compose.material.icons.filled.Person\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Checkbox\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExposedDropdownMenuDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontStyle\r\nimport androidx.compose.ui.text.font.FontSynthesis\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.civicalertoriginal.R\r\n\r\n\r\n\r\n\r\n@Composable\r\nfun LogAndForgotHeader(screenLabel:String) {\r\n    Column ( modifier = Modifier.fillMaxWidth(),\r\n        horizontalAlignment = Alignment.CenterHorizontally)\r\n    {\r\n        Image(painter = painterResource(id = R.drawable.logo),\r\n            contentDescription = \"Picture Logo\", modifier = Modifier.size(150.dp, 150.dp))\r\n        Spacer(modifier = Modifier.size(5.dp))\r\n        Text(text = screenLabel , modifier = Modifier\r\n            .align(Alignment.CenterHorizontally)\r\n            .wrapContentSize(),\r\n            style = TextStyle( color = Color.Black,\r\n                fontStyle = FontStyle.Normal,\r\n                fontSize = 20.sp)\r\n        )\r\n\r\n    }\r\n}\r\n\r\n//Text fields that accept text only\r\n@Composable\r\nfun TextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n//Text fields that accept Numbers only\r\n@Composable\r\nfun NumberTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n//Text fields that accept email only\r\n@Composable\r\nfun EmailTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PasswordTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){\r\n\r\n    var passwordVisibility by remember { mutableStateOf(false) }\r\n    val icon = if(passwordVisibility )\r\n        painterResource(id = R.drawable.eye)\r\n    else\r\n        painterResource(id = R.drawable.hidden)\r\n\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value ,\r\n            onValueChange = onChange,\r\n            supportingText = {\r\n                Text(text = \"Passwords must match\")},\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n\r\n\r\n            trailingIcon = {\r\n                           IconButton(onClick = { passwordVisibility = !passwordVisibility }) {\r\n                               Icon(painter = icon, contentDescription =\"\",\r\n                                   modifier = Modifier.size(20.dp,20.dp))\r\n                               \r\n                           }\r\n\r\n            }, visualTransformation = if (passwordVisibility) VisualTransformation.None\r\n            else PasswordVisualTransformation(),\r\n\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun BottomButtons(name: String, onClick: () -> Unit,){\r\n    Button(onClick = onClick, shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(200.dp)) {\r\n        Text(text = name, modifier = Modifier\r\n            .size(80.dp, 30.dp)\r\n            .padding(start = 17.dp, top = 4.dp)\r\n            .align(Alignment.CenterVertically),\r\n            color = Color.Black)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun LogBottomButtons(name: String, onClick: () -> Unit, enabled: Boolean){\r\n    Button(onClick = onClick, enabled = enabled, shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(200.dp)) {\r\n        Text(text = name, modifier = Modifier\r\n            .size(80.dp, 30.dp)\r\n            .padding(start = 17.dp, top = 4.dp)\r\n            .align(Alignment.CenterVertically),\r\n            color = Color.Black)\r\n    }\r\n}\r\n@Composable\r\nfun SignUpText(value: String){\r\n    Row ( modifier = Modifier.padding(2.dp)){\r\n        var state by remember { mutableStateOf(\"\") }\r\n        Text(text = value, modifier = Modifier\r\n        )\r\n\r\n        Checkbox(checked = false, onCheckedChange = { }, enabled = true, modifier = Modifier\r\n            .size(20.dp)\r\n            .padding(end = 16.dp, start = 12.dp)\r\n\r\n            .clip(RoundedCornerShape(50.dp))\r\n        )\r\n    }\r\n}\r\n@Composable\r\nfun InstructionText(value: String){\r\n    Text(\r\n        text = value,\r\n        style = TextStyle(\r\n            fontStyle = FontStyle.Normal,\r\n            fontSize = 15.sp,\r\n            color = Color.Black\r\n        )\r\n    )\r\n}\r\n@Composable\r\nfun LocationTextFields(value: String, onChange: (String) -> Unit, fieldLabel: String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            trailingIcon = {\r\n                Icon(\r\n                    modifier = Modifier\r\n                        .size(35.dp, 35.dp)\r\n                        .clickable { },\r\n                    imageVector = Icons.Default.LocationOn,\r\n                    contentDescription = \"Location Icon\"\r\n                ) },\r\n            keyboardOptions = KeyboardOptions.Default,\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n@Composable\r\nfun ReportDescriptionText(value1: String, value:String){\r\n    Column {\r\n\r\n        Text(text = value1, style = TextStyle(\r\n            fontFamily = FontFamily.SansSerif,\r\n            fontSize = 20.sp, fontWeight = FontWeight.Bold,\r\n            fontSynthesis = FontSynthesis.All\r\n        )\r\n        )\r\n        Text(text = value, style = TextStyle(\r\n            fontFamily = FontFamily.Default,\r\n            fontSize = 16.sp,\r\n            fontWeight = FontWeight.Light,\r\n        )\r\n        )\r\n    }\r\n}\r\n@Composable\r\nfun PictureTextFields(value: String, onChange: (String) -> Unit, fieldLabel: String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            trailingIcon = {\r\n                Icon(\r\n                    modifier = Modifier\r\n                        .size(35.dp, 35.dp)\r\n                        .clickable { },\r\n                    imageVector = Icons.Default.Person,\r\n                    contentDescription = \"Location Icon\"\r\n                ) },\r\n            keyboardOptions = KeyboardOptions.Default,\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n@Composable\r\nfun DescriptionTextFields(value: String, onChange: (String) -> Unit, fieldLabel: String){\r\n    Column (verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally){\r\n        OutlinedTextField(value = value , onValueChange = onChange,\r\n            placeholder = { Text(text = fieldLabel, color = Color.Green)},\r\n            trailingIcon = {\r\n                Icon(\r\n                    modifier = Modifier\r\n                        .size(35.dp, 35.dp)\r\n                        .clickable { },\r\n                    imageVector = Icons.Default.Info,\r\n                    contentDescription = \"Location Icon\"\r\n                ) },\r\n            keyboardOptions = KeyboardOptions.Default,\r\n            textStyle = TextStyle(color = Color.Black ), modifier = Modifier\r\n                .height(50.dp)\r\n                .fillMaxWidth()\r\n                .background(Color.White)\r\n        )\r\n    }\r\n}\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun ExposedDropdownMenuBox() {\r\n    val context = LocalContext.current\r\n    val Incidents= arrayOf(\"Water\", \"Electricity\", \"Pothole\", \"Other\")\r\n    var expanded by remember { mutableStateOf(false) }\r\n    var selectedText by remember { mutableStateOf(Incidents[0]) }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n\r\n    ) {\r\n        androidx.compose.material3.ExposedDropdownMenuBox(\r\n            expanded = expanded,\r\n            onExpandedChange = {\r\n                expanded = !expanded\r\n            }\r\n        ) {\r\n            TextField(\r\n                value = selectedText,\r\n                onValueChange = {},\r\n                readOnly = true,\r\n                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },\r\n                modifier = Modifier\r\n                    .menuAnchor()\r\n                    .fillMaxWidth()\r\n            )\r\n\r\n            ExposedDropdownMenu(\r\n                expanded = expanded,\r\n                onDismissRequest = { expanded = false }\r\n            ) {\r\n                Incidents.forEach { item ->\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = item) },\r\n                        onClick = {\r\n                            selectedText = item\r\n                            expanded = false\r\n                            Toast.makeText(context, item, Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun SignUpBottomButtons( name:String , onClick : ()-> Unit ){\r\n    Button(\r\n        onClick = onClick,\r\n        shape = ButtonDefaults.shape,\r\n        colors = ButtonDefaults.buttonColors(Color.Green),\r\n        modifier = Modifier\r\n            .width(200.dp)\r\n    ) {\r\n        Text(text = name, modifier = Modifier\r\n            .size(80.dp, 30.dp)\r\n            .padding(start = 17.dp, top = 4.dp)\r\n            .align(Alignment.CenterVertically),\r\n            color = Color.Black)\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt b/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt	(revision dd2ca91062889439b9abd4ca7c5ac9e272463ebb)
+++ b/app/src/main/java/com/example/civicalertoriginal/Components/Components.kt	(date 1718990142616)
@@ -1,14 +1,21 @@
+@file:Suppress("UNREACHABLE_CODE")
+
 package com.example.civicalertoriginal.Components
 
 import android.widget.Toast
+import androidx.compose.animation.animateColorAsState
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
+import androidx.compose.foundation.hoverable
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.interaction.collectIsHoveredAsState
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
@@ -16,6 +23,7 @@
 import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.layout.wrapContentSize
 import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.foundation.text.BasicText
 import androidx.compose.foundation.text.KeyboardOptions
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.Info
@@ -23,12 +31,15 @@
 import androidx.compose.material.icons.filled.Person
 import androidx.compose.material3.Button
 import androidx.compose.material3.ButtonDefaults
+import androidx.compose.material3.Card
+import androidx.compose.material3.CardDefaults
 import androidx.compose.material3.Checkbox
 import androidx.compose.material3.DropdownMenuItem
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.ExposedDropdownMenuDefaults
 import androidx.compose.material3.Icon
-import androidx.compose.material3.IconButton
+import androidx.compose.material3.LocalContentColor
+import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.OutlinedTextField
 import androidx.compose.material3.Text
 import androidx.compose.material3.TextField
@@ -41,6 +52,9 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.clip
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.input.pointer.PointerInputScope
+import androidx.compose.ui.input.pointer.pointerInput
+import androidx.compose.ui.input.pointer.positionChangeConsumed
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.TextStyle
@@ -49,15 +63,11 @@
 import androidx.compose.ui.text.font.FontSynthesis
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.input.KeyboardType
-import androidx.compose.ui.text.input.PasswordVisualTransformation
-import androidx.compose.ui.text.input.VisualTransformation
+import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import com.example.civicalertoriginal.R
 
-
-
-
 @Composable
 fun LogAndForgotHeader(screenLabel:String) {
     Column ( modifier = Modifier.fillMaxWidth(),
@@ -71,7 +81,7 @@
             .wrapContentSize(),
             style = TextStyle( color = Color.Black,
                 fontStyle = FontStyle.Normal,
-                fontSize = 20.sp)
+                fontSize = 30.sp)
         )
 
     }
@@ -111,7 +121,7 @@
 
 //Text fields that accept email only
 @Composable
-fun EmailTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){
+fun EmailTextFields(value:String, onChange: (String)->Unit, fieldLabel:String){
     Column (verticalArrangement = Arrangement.Center,
         horizontalAlignment = Alignment.CenterHorizontally){
         OutlinedTextField(value = value , onValueChange = onChange,
@@ -126,33 +136,11 @@
 }
 
 @Composable
-fun PasswordTextFields(value:String,onChange:(String)->Unit,fieldLabel:String){
-
-    var passwordVisibility by remember { mutableStateOf(false) }
-    val icon = if(passwordVisibility )
-        painterResource(id = R.drawable.eye)
-    else
-        painterResource(id = R.drawable.hidden)
-
+fun PasswordTextFields(value:String, onChange:(String)->Unit, fieldLabel:String){
     Column (verticalArrangement = Arrangement.Center,
         horizontalAlignment = Alignment.CenterHorizontally){
-        OutlinedTextField(value = value ,
-            onValueChange = onChange,
-            supportingText = {
-                Text(text = "Passwords must match")},
+        OutlinedTextField(value = value , onValueChange = onChange,
             placeholder = { Text(text = fieldLabel, color = Color.Green)},
-
-
-            trailingIcon = {
-                           IconButton(onClick = { passwordVisibility = !passwordVisibility }) {
-                               Icon(painter = icon, contentDescription ="",
-                                   modifier = Modifier.size(20.dp,20.dp))
-                               
-                           }
-
-            }, visualTransformation = if (passwordVisibility) VisualTransformation.None
-            else PasswordVisualTransformation(),
-
             keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
             textStyle = TextStyle(color = Color.Black ), modifier = Modifier
                 .height(50.dp)
@@ -179,7 +167,7 @@
 
 @Composable
 fun LogBottomButtons(name: String, onClick: () -> Unit, enabled: Boolean){
-    Button(onClick = onClick, enabled = enabled, shape = ButtonDefaults.shape,
+    Button(onClick = onClick, shape = ButtonDefaults.shape,
         colors = ButtonDefaults.buttonColors(Color.Green),
         modifier = Modifier
             .width(200.dp)) {
@@ -192,12 +180,12 @@
 }
 @Composable
 fun SignUpText(value: String){
-    Row ( modifier = Modifier.padding(2.dp)){
+    Row ( modifier = Modifier.padding(10.dp)){
         var state by remember { mutableStateOf("") }
         Text(text = value, modifier = Modifier
         )
 
-        Checkbox(checked = false, onCheckedChange = { }, enabled = true, modifier = Modifier
+        Checkbox(checked = false, onCheckedChange = {}, enabled = true, modifier = Modifier
             .size(20.dp)
             .padding(end = 16.dp, start = 12.dp)
 
@@ -363,6 +351,39 @@
             color = Color.Black)
     }
 }
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun Cards( value: String,){
+    Card(modifier = Modifier
+        .size(250.dp)
+        .padding(16.dp), shape =  RoundedCornerShape(16.dp),
+        colors = CardDefaults.cardColors(containerColor = Color.Green), elevation =
+            CardDefaults.cardElevation(defaultElevation = 8.dp)
+    ) {
+        Text(text = value, modifier = Modifier.fillMaxSize(),
+            style = MaterialTheme.typography.headlineMedium.copy(
+                color = Color.Black,
+                fontSize = 25.sp,
+                fontWeight = FontWeight.Bold,
+                textAlign = TextAlign.Justify
+            )
+        )
 
 
+    }
+}
+@Composable
+fun HoverableText(
+    text: String,
+    defaultColor: Color = LocalContentColor.current,
+    hoverColor: Color = Color.Red
+) {
+    val interactionSource = remember { MutableInteractionSource() }
+    val isHovered by interactionSource.collectIsHoveredAsState()
 
+    Text(
+        text,
+        color = if (isHovered) hoverColor else defaultColor,
+        modifier = Modifier.hoverable(interactionSource)
+    )
+}
Index: app/src/main/java/com/example/civicalertoriginal/Screens/DashBoard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal.Screens\r\n\r\nimport android.annotation.SuppressLint\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Home\r\nimport androidx.compose.material.icons.materialIcon\r\nimport androidx.compose.material.icons.outlined.Info\r\nimport androidx.compose.material.icons.rounded.AccountCircle\r\nimport androidx.compose.material.icons.rounded.Person\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\n\r\nimport com.example.civicalertoriginal.R\r\n\r\n\r\n\r\n@SuppressLint(\"UnusedMaterial3ScaffoldPaddingParameter\")\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun DashBoard(navController: NavController) {\r\n    Surface(color = Color.White) {\r\n        Scaffold(topBar = {\r\n            TopAppBar(title = {\r\n                Row(\r\n                    verticalAlignment = Alignment.Top,\r\n                    horizontalArrangement = Arrangement.SpaceBetween,\r\n                    modifier = Modifier.fillMaxWidth()) {\r\n                    Image(\r\n                        painter = painterResource(id = R.drawable.logo), contentDescription = \"\",\r\n                         modifier = Modifier.size(100.dp)\r\n                    )\r\n                    Icon(\r\n                        imageVector = Icons.Rounded.AccountCircle, contentDescription = \"\",\r\n                        modifier = Modifier.size(100.dp)\r\n                    )\r\n                }\r\n            })\r\n        }, bottomBar = {\r\n           Row (verticalAlignment = Alignment.Bottom,\r\n               horizontalArrangement = Arrangement.SpaceAround){\r\n               Icon(imageVector = Icons.Filled.Home, contentDescription = \"\", modifier = Modifier.size(50.dp))\r\n               Spacer(modifier = Modifier.size(140.dp))\r\n               Icon(imageVector = Icons.Outlined.Info, contentDescription = \"\", modifier = Modifier.size(50.dp))\r\n               Spacer(modifier = Modifier.size(140.dp))\r\n               Icon(imageVector = Icons.Rounded.Person, contentDescription = \"\", modifier = Modifier.size(50.dp))\r\n           }\r\n        }, content = { innerPadding ->\r\n            Column {\r\n\r\n            }\r\n        }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Screens/DashBoard.kt b/app/src/main/java/com/example/civicalertoriginal/Screens/DashBoard.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Screens/DashBoard.kt	(revision dd2ca91062889439b9abd4ca7c5ac9e272463ebb)
+++ b/app/src/main/java/com/example/civicalertoriginal/Screens/DashBoard.kt	(date 1718990143112)
@@ -26,7 +26,7 @@
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.unit.dp
 import androidx.navigation.NavController
-
+import com.example.civicalertoriginal.Components.Cards
 import com.example.civicalertoriginal.R
 
 
@@ -63,7 +63,12 @@
            }
         }, content = { innerPadding ->
             Column {
-
+                Cards(value = "View all new reports")
+                Row {
+                    Cards(value = "REPORT AN INCIDENT")
+                    Cards(value = "EMERGENCY CONTACTS")
+                }
+                Cards(value = "HELP & SUPPORT")
             }
         }
         )
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.jetbrains.kotlin.android)\r\n    alias(libs.plugins.google.gms.google.services)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.civicalertoriginal\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.civicalertoriginal\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables {\r\n            useSupportLibrary = true\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"1.8\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n    composeOptions {\r\n        kotlinCompilerExtensionVersion = \"1.5.1\"\r\n    }\r\n    packaging {\r\n        resources {\r\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n    implementation(libs.firebase.common.ktx)\r\n    implementation(libs.androidx.navigation.compose)\r\n    implementation(libs.firebase.database)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision dd2ca91062889439b9abd4ca7c5ac9e272463ebb)
+++ b/app/build.gradle.kts	(date 1718990142720)
@@ -62,6 +62,7 @@
     implementation(libs.firebase.common.ktx)
     implementation(libs.androidx.navigation.compose)
     implementation(libs.firebase.database)
+    implementation(libs.firebase.auth)
     testImplementation(libs.junit)
     androidTestImplementation(libs.androidx.junit)
     androidTestImplementation(libs.androidx.espresso.core)
Index: app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal.Components\r\n\r\nimport CivicAlert.Screen.MakeReports\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.civicalertoriginal.Screens.DashBoard\r\nimport com.example.civicalertoriginal.Screens.ForgotPassword\r\nimport com.example.civicalertoriginal.Screens.LogIn\r\nimport com.example.civicalertoriginal.Screens.Registration\r\n\r\n\r\n@Composable\r\nfun Navigation (){\r\n    val navController = rememberNavController()\r\n    NavHost(navController = navController, startDestination = \"Login\") {\r\n        composable(\"registration\"){\r\n            Registration(navController)\r\n        }\r\n        composable(\"Login\"){\r\n            LogIn(navController)\r\n        }\r\n        composable(\"forgotPassword\"){\r\n            ForgotPassword(navController)\r\n        }\r\n        composable(\"Dashboard\"){\r\n            DashBoard(navController)\r\n        }\r\n        composable(\"makeReports\"){\r\n            MakeReports(navController)\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt b/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt
--- a/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt	(revision dd2ca91062889439b9abd4ca7c5ac9e272463ebb)
+++ b/app/src/main/java/com/example/civicalertoriginal/Components/Navigation.kt	(date 1718990142683)
@@ -14,7 +14,8 @@
 @Composable
 fun Navigation (){
     val navController = rememberNavController()
-    NavHost(navController = navController, startDestination = "Login") {
+    NavHost(navController = navController, startDestination = "registration" +
+            "") {
         composable("registration"){
             Registration(navController)
         }
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.4.1\"\r\nkotlin = \"1.9.0\"\r\ncoreKtx = \"1.13.1\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.1.5\"\r\nespressoCore = \"3.5.1\"\r\nlifecycleRuntimeKtx = \"2.8.1\"\r\nactivityCompose = \"1.9.0\"\r\ncomposeBom = \"2023.08.00\"\r\nfirebaseCommonKtx = \"21.0.0\"\r\nnavigationCompose = \"2.7.7\"\r\ngoogleGmsGoogleServices = \"4.4.2\"\r\nfirebaseDatabase = \"21.0.0\"\r\n\r\n[libraries]\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\r\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\r\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\r\nandroidx-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\r\nandroidx-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\r\nandroidx-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\r\nandroidx-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\r\nandroidx-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\r\nandroidx-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\r\nandroidx-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\r\nfirebase-common-ktx = { group = \"com.google.firebase\", name = \"firebase-common-ktx\", version.ref = \"firebaseCommonKtx\" }\r\nandroidx-navigation-compose = { group = \"androidx.navigation\", name = \"navigation-compose\", version.ref = \"navigationCompose\" }\r\nfirebase-database = { group = \"com.google.firebase\", name = \"firebase-database\", version.ref = \"firebaseDatabase\" }\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\njetbrains-kotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\ngoogle-gms-google-services = { id = \"com.google.gms.google-services\", version.ref = \"googleGmsGoogleServices\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision dd2ca91062889439b9abd4ca7c5ac9e272463ebb)
+++ b/gradle/libs.versions.toml	(date 1718990142734)
@@ -12,6 +12,7 @@
 navigationCompose = "2.7.7"
 googleGmsGoogleServices = "4.4.2"
 firebaseDatabase = "21.0.0"
+firebaseAuth = "23.0.0"
 
 [libraries]
 androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
@@ -31,6 +32,7 @@
 firebase-common-ktx = { group = "com.google.firebase", name = "firebase-common-ktx", version.ref = "firebaseCommonKtx" }
 androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationCompose" }
 firebase-database = { group = "com.google.firebase", name = "firebase-database", version.ref = "firebaseDatabase" }
+firebase-auth = { group = "com.google.firebase", name = "firebase-auth", version.ref = "firebaseAuth" }
 
 [plugins]
 android-application = { id = "com.android.application", version.ref = "agp" }
Index: app/src/main/java/com/example/civicalertoriginal/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.civicalertoriginal\r\n\r\nimport CivicAlert.Screen.MakeReports\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.civicalertoriginal.Components.Navigation\r\nimport com.example.civicalertoriginal.Screens.DashBoard\r\nimport com.example.civicalertoriginal.Screens.ForgotPassword\r\nimport com.example.civicalertoriginal.Screens.LogIn\r\nimport com.example.civicalertoriginal.ui.theme.CivicAlertOriginalTheme\r\nimport com.google.firebase.Firebase\r\nimport com.google.firebase.FirebaseApp\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        FirebaseApp.initializeApp(this)\r\n        setContent {\r\n            CivicAlertOriginalTheme {\r\n                Navigation()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/civicalertoriginal/MainActivity.kt b/app/src/main/java/com/example/civicalertoriginal/MainActivity.kt
--- a/app/src/main/java/com/example/civicalertoriginal/MainActivity.kt	(revision dd2ca91062889439b9abd4ca7c5ac9e272463ebb)
+++ b/app/src/main/java/com/example/civicalertoriginal/MainActivity.kt	(date 1718990142702)
@@ -30,6 +30,7 @@
         setContent {
             CivicAlertOriginalTheme {
                 Navigation()
+
             }
         }
     }
